# parse given markdown file to html and open it in a browser
showdown() {
	if [ ! $1 ]; then
		echo "specify a file"
		return 1;
	elif [ ! -f $1 ]; then
		echo "file $1 does not exist"
		return 1;
	fi

	fname="$1_$RANDOM.html"
	fpath="/tmp/$fname"
	maruku --html $1 -o $fpath
	x-www-browser $fpath
}

# conditional apt-get update to allow redundant use in other scripts
aptupdate() {
	if [ $1 ] && [ $1 = "-f" ]; then
		sudo apt-get update
		return 0;
	fi
	if [ ! -d /var/cache/apt ]; then
		sudo apt-get update
		return 0;
	fi

	## threshold for new apt-get update in seconds
	THRESHOLD=3600

	NOW=$(date +%s)
	LASTUPDATE=$(stat -c %Y /var/cache/apt)
	DIF=$(($NOW-$LASTUPDATE))

	if [ $DIF -gt $THRESHOLD ]; then
		sudo apt-get update
	fi
}

## git push
gp() {
	if [ ! $1 ]; then
		remote="origin"
	else
		remote=$1
	fi

	git push $remote HEAD
}

## clone from bitbucket
gcbb() {
	if [ ! -d $1 ]; then
		git clone git@bitbucket.org:$1.git $2
	else
		echo "$1 already exists"
	fi
}

## clone frome github
gcgh() {
	if [ ! -d $1 ]; then
		git clone git@github.com:$1.git $2
	else
		echo "$1 already exists"
	fi
}

# "git diff word count" counts the words that were added or removed in a diff
# useful for checking how much you thesis writing you got done
gdwc() {
	a=$(git diff "$@" | grep "^+" | wc -w)
	d=$(git diff "$@" | grep "^-" | wc -w)

	echo $(($a - $d))
}

## initialise an empty git repository and commit a basic .gitignore
ginit() {
	if [ -d .git ]; then
		echo "directory already a git repository"
		return 1
	fi

	if [ ! -f .gitignore ]; then
		cp ~/.dotfiles/templates/.gitignore .
	fi

	git init
	git add .gitignore
	git commit -m "Initial commit"
}

git-report() {
	if [ ! -d .git ]; then
		echo "directory is not a git repository"
		return 1
	fi

	rev=$(git log --pretty=format:'%h' -n 1)

	tmpfile="gitinspector-report-$rev.html"
	gitinspector -wTHlrm --format=html > /tmp/$tmpfile

	x-www-browser /tmp/$tmpfile &
}

# maven
## remove abandoned bundles (bundles with only a target folder)
rmab() {
	for p in `find -type d -name "target"`; do
		
		parent=$(dirname $p)

		cnt=$(ls -a1 $parent --ignore "*.iml" --ignore "*.ipr" --ignore ".project" --ignore ".classpath" --ignore ".settings" | wc -l)

		if [ $cnt -le 3 ]; then
			echo "rm -r $parent"
			rm -r $parent
		fi

	done;
}

## maven recursive clean (this is so ugly ...)
mvnrc() {
	# remove all abandoned bundles first
	rmab

	for target in $(find -type d -name "target"); do
		dir=$(dirname $target)
		pom=$dir/pom.xml

		if [ -f $pom ]; then
			echo -n "cleaning $dir ..."
			(cd $dir; mvn -fn -B -q clean)
			echo " done!"
		fi
	done
}


# extract
ex () {
	if [ -f $1 ] ; then
		case $1 in
			*.tar.bz2)   tar xvjf $1    ;;
			*.tar.gz)    tar xvzf $1    ;;
			*.tar.xz)    tar xvJf $1    ;;
			*.bz2)       bunzip2 $1     ;;
			*.rar)       unrar x $1     ;;
			*.gz)        gunzip $1      ;;
			*.tar)       tar xvf $1     ;;
			*.tbz2)      tar xvjf $1    ;;
			*.tgz)       tar xvzf $1    ;;
			*.zip)       unzip $1       ;;
			*.Z)         uncompress $1  ;;
			*.7z)        7z x $1        ;;
			*.exe)       cabextract $1  ;;
			*.jar)       jar xvf $1     ;;
			*)           echo "'$1': unrecognized file compression" ;;
		esac
	else
		echo "'$1' is not a valid file"
	fi
}

# chmod restore
#   recursively sets chmod of files to 644 and directories to 755
chres() {
	if [ $1 ]; then
		folder=$1
	else
		folder="."
	fi

	find $folder -type d -exec chmod 755 "{}" \;
	find $folder -type f -exec chmod 644 "{}" \;
}

ishostup() {
	nmap -sP --host-timeout=250ms $1 | grep "Host is up" > /dev/null

	if [ $? -eq 0 ]; then
		echo "yes"
		return 0
	else
		echo "no"
		return 1
	fi
}

# remap control to caps lock (remove capslock)
rmcaps() {
	xmodmap -e 'remove Lock = Caps_Lock'
	xmodmap -e 'keysym Caps_Lock = Control_L'
	xmodmap -e 'add Control = Control_L'
}

## normalize a pdf using PDFCROP and Ghostscript
pdfnorm() {
	MARGINS=30
	PAPERSIZE=a4

	if [ ! $1 ]; then
		echo "please specify an input file"
		return 1;
	elif [ ! -f $1 ]; then
		echo "$1 is not a file"
		return 1;
	fi

	TMPFILE=$(mktemp)

	if [ ! $2 ]; then
		OUTFILE=output.pdf
	else
		OUTFILE=$2
	fi

	pdfcrop --margins $MARGINS $1 $TMPFILE > /dev/null
	ghostscript -dNOPAUSE -dBATCH -sDEVICE=pdfwrite -sPAPERSIZE=$PAPERSIZE -dFIXEDMEDIA -dPDFFitPage -sOutputFile=$OUTFILE $TMPFILE > /dev/null

	rm $TMPFILE
}

## count words of a pdf
pdfwc() {
	if [ ! $1 ]; then
		echo "please specify an input file"
		return 1;
	elif [ ! -f $1 ]; then
		echo "$1 is not a file"
		return 1;
	fi

	pdftotext $1 - | wc -w
}

# clean intellij IDEA project files
idea-clean() {
	if [ $1 ]; then
		folder=$1
	else
		folder="."
	fi

	REGEX=".*\.\(iml\|ipr\)"
	find $1 -regex $REGEX -exec rm -rf {} \;
	find $1 -type d -name ".idea" | xargs rm -r
}

## trace a given command
trace() {
	while [ 1 ]; do
		clear
		$@
		sleep 0.5
	done
}

## copies the given ssh key (or ~/.ssh/id_rsa.pub if none is given) to the given server location
ssh-register() {
	if [ -f $1 ]; then
		key=$1
		shift
	else
		key="$HOME/.ssh/id_rsa.pub"
	fi

	if [ ! -f $key ]; then
		echo "$key not found"
		return 1
	fi

	cat $key | ssh "$@" "[ -d ~/.ssh ] || mkdir ~/.ssh; cat >> ~/.ssh/authorized_keys"
}

## recursive git
rgit() {
	for f in $(find -L -name .git -a -type d | sed "s/^\.\///"); do
		d=$(dirname $f)
		echo -e "\e[1;34m${d}\e[0m"
		(cd $d; git "$@")
		echo
	done
}

alias rg=rgit

## recursive git status
alias rgs='rg status -sb'

## recursive git remote update
alias rgru='rg remote update'


## convert svgs to pdfs
svg2pdf() {
	IFS=$'\n'

	for f in $*; do
		bname=$(basename $f)
		name=${bname%.*}

		svg=$(dirname $f)/$name.svg
		pdf=$(dirname $f)/$name.pdf

		if [ $svg -ot $pdf ]; then
			echo "skipping $svg"
			continue
		fi

		echo "converting $svg -> $pdf"
		inkscape -D -z --file="$svg" --export-pdf="$pdf"
	done
}

# runs basic pdflatex build
texmake() {
	t="$1"

	if [ ! $t ] || [ ! -f $t ]; then
		# try to find a single tex file
		texs=(*.tex)

		if [ 1 -eq "${#texs[@]}" ]; then
			t="$texs"
		elif [ 1 -lt "${#texs[@]}" ]; then
			echo "${texs[@]}"
			return 1
		fi
	fi

	if [ ! $t ] || [ ! -f $t ]; then
		echo "Could not find a target tex file"
		return 1
	fi

	fname=${t%.tex}

	pdflatex $fname
	bibtex $fname
	pdflatex $fname
	pdflatex $fname

}

xclip-clear() {
    echo -n | xclip
    echo -n | xclip -selection clipboard
}

imgscale() {
	factor=$1
	shift

	for img in "$@"; do
		width=$(identify -format "%w" "${img}")
		nwdith=$(( $factor * $width ))
		nwdith=$(printf "%.0f" "${nwdith}")

		ext=${img##*.}
		fname=$(basename $img ".$ext")
		nfname="${fname}_scaled.${ext}"

		convert ${img} -resize ${nwdith} -quality 95 ${nfname}
	done
}

ssh-forward() {
	# ssh-forward user@remote.com 8080 7700:5000 ...

	export host=$1
	shift
	# export ports="$@"

	portargs() {
		for port in "$@"; do

			if [[ $port =~ ^[0-9]{2,5}$ ]]; then
				echo "\-L ${port}\:localhost\:${port}"
			elif [[ $port =~ ^[0-9]{2,5}:[0-9]{2,5}$ ]]; then
				port_local=$(echo $port | cut -d':' -f 1)
				port_remote=$(echo $port | cut -d':' -f 2)
				echo "\-L ${port_local}\:localhost\:${port_remote}"
			else
				echo "Bad forwarding specification '$port'" 1>&2
			fi

		done
	}

	ssh -N $(portargs "$@" | xargs) $host
}
