# parse given markdown file to html and open it in a browser
showdown() {
	if [ ! $1 ]; then
		echo "specify a file"
		return 1;
	elif [ ! -f $1 ]; then
		echo "file $1 does not exist"
		return 1;
	fi

	fname="$1_$RANDOM.html"
	fpath="/tmp/$fname"
	maruku --html $1 -o $fpath
	x-www-browser $fpath
}

# git
gsync() {
	git remote update

	if [ ! $1 ]; then
		branch="origin"
	else
		branch=$1
	fi

	git reset --hard $branch/master
}

## git push
gp() {
	if [ ! $1 ]; then
		branch="origin"
	else
		branch=$1
	fi

	git push $branch HEAD
}

## clone from bitbucket
gcbb() {
	if [ ! -d $1 ]; then
		git clone git@bitbucket.org:$1.git $2
	else
		echo "$1 already exists"
	fi
}

## clone frome github
gcgh() {
	if [ ! -d $1 ]; then
		git clone git@github.com:$1.git $2
	else
		echo "$1 already exists"
	fi
}

# maven
## remove abandoned bundles (bundles with only a target folder)
rmab() {
	for p in `find -name "target"`; do
		if [ ! -d $p ]; then
			continue
		fi
		
		parent=`dirname $p`
		
		files=($parent/*)
		
		if [ `basename ${files[0]}` = "target" ]; then
			if [ ! ${files[1]} ]; then
				echo "rm -rf $parent"
				rm -rf $parent
			fi
		fi
	done;
}

## maven recursive clean (this is so ugly ...)
mvnrc() {
  # remove all abandoned bundles first
  rmab

  poms=$(find . -type f -name pom.xml -print |
  	perl -n -e '$x = $_; $x =~ tr%/%%cd; print length($x), " $_";' |
  	sort -k 1n -k 2 |
  	sed 's/^[0-9][0-9]* //');

for pom in $poms
do
	path=`dirname $pom`

	found=0
	for t in `find $path -name target -o -name .project`; do
		found=1
		break
	done

	if [ $found == 0 ]; then
		echo "skipping $pom"
		continue
	fi

	echo -n "cleaning $pom ..."
	mvn -U -fn -B -q -f $pom clean eclipse:clean
	echo " done!"
done
}


# extract
ex () {
	if [ -f $1 ] ; then
		case $1 in
		*.tar.bz2)   tar xvjf $1    ;;
		*.tar.gz)    tar xvzf $1    ;;
		*.bz2)       bunzip2 $1     ;;
		*.rar)       unrar x $1     ;;
		*.gz)        gunzip $1      ;;
		*.tar)       tar xvf $1     ;;
		*.tbz2)      tar xvjf $1    ;;
		*.tgz)       tar xvzf $1    ;;
		*.zip)       unzip $1       ;;
		*.Z)         uncompress $1  ;;
		*.7z)        7z x $1        ;;
		*.exe)       cabextract $1  ;;
		*.jar)       jar xvf $1     ;;
		*)           echo "'$1': unrecognized file compression" ;;
esac
else
	echo "'$1' is not a valid file"
fi
}

# chmod restore
#   recursively sets chmod of files to 644 and directories to 755
chres() {
	if [ $1 ]; then
		folder=$1
	else
		folder="."
	fi

	find $folder -type d | xargs chmod 755
	find $folder -type f | xargs chmod 644
}

# remap control to caps lock (remove capslock)
rmcaps() {
	xmodmap -e 'remove Lock = Caps_Lock'
	xmodmap -e 'keysym Caps_Lock = Control_L'
	xmodmap -e 'add Control = Control_L'
}
