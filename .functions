# parse given markdown file to html and open it in a browser
showdown() {
	if [ ! $1 ]; then
		echo "specify a file"
		return 1;
	elif [ ! -f $1 ]; then
		echo "file $1 does not exist"
		return 1;
	fi

	fname="$1_$RANDOM.html"
	fpath="/tmp/$fname"
	maruku --html $1 -o $fpath
	x-www-browser $fpath
}

# conditional apt-get update to allow redundant use in other scripts
aptupdate() {
	if [ $1 ] && [ $1 = "-f" ]; then
		sudo apt-get update
		return 0;
	fi
	if [ ! -d /var/cache/apt ]; then
		sudo apt-get update
		return 0;
	fi

	## threshold for new apt-get update in seconds
	THRESHOLD=3600

	NOW=$(date +%s)
	LASTUPDATE=$(stat -c %Y /var/cache/apt)
	DIF=$(($NOW-$LASTUPDATE))

	if [ $DIF -gt $THRESHOLD ]; then
		sudo apt-get update
	fi
}

## git push
gp() {
	if [ ! $1 ]; then
		remote="origin"
	else
		remote=$1
	fi

	git push $remote HEAD
}

## clone from bitbucket
gcbb() {
	if [ ! -d $1 ]; then
		git clone git@bitbucket.org:$1.git $2
	else
		echo "$1 already exists"
	fi
}

## clone frome github
gcgh() {
	if [ ! -d $1 ]; then
		git clone git@github.com:$1.git $2
	else
		echo "$1 already exists"
	fi
}

## initialise an empty git repository and commit a basic .gitignore
ginit() {
	if [ -d .git ]; then
		echo "directory already a git repository"
		return 1
	fi

	if [ ! -f .gitignore ]; then
		cp ~/.dotfiles/templates/.gitignore .
	fi

	git init
	git add .gitignore
	git commit -m "Initial commit"
}

git-report() {
	if [ ! -d .git ]; then
		echo "directory is not a git repository"
		return 1
	fi

	rev=$(git log --pretty=format:'%h' -n 1)

	tmpfile="gitinspector-report-$rev.html"
	gitinspector -wTHlrm --format=html > /tmp/$tmpfile

	x-www-browser /tmp/$tmpfile &
}

# maven
## remove abandoned bundles (bundles with only a target folder)
rmab() {
	for p in `find -type d -name "target"`; do
		
		parent=$(dirname $p)

		cnt=$(ls -a1 $parent --ignore "*.iml" --ignore "*.ipr" --ignore ".project" --ignore ".classpath" --ignore ".settings" | wc -l)

		if [ $cnt -le 3 ]; then
			echo "rm -r $parent"
			rm -r $parent
		fi

	done;
}

## maven recursive clean (this is so ugly ...)
mvnrc() {
	# remove all abandoned bundles first
	rmab

	# "sorted by path" (amount of slahes). looks like breadth first search
	poms=$(find . -type f -name pom.xml -print |
		perl -n -e '$x = $_; $x =~ tr%/%%cd; print length($x), " $_";' |
		sort -k 1n -k 2 |
		sed 's/^[0-9][0-9]* //');

	for pom in $poms
	do
		path=`dirname $pom`

		found=0
		for t in `find $path -name target -o -name .project`; do
			found=1
			break
		done

		if [ $found == 0 ]; then
			echo "skipping $pom"
			continue
		fi

		echo -n "cleaning $pom ..."
		mvn -fn -B -q -o -f $pom clean eclipse:clean
		echo " done!"
	done
}


# extract
ex () {
	if [ -f $1 ] ; then
		case $1 in
			*.tar.bz2)   tar xvjf $1    ;;
			*.tar.gz)    tar xvzf $1    ;;
			*.bz2)       bunzip2 $1     ;;
			*.rar)       unrar x $1     ;;
			*.gz)        gunzip $1      ;;
			*.tar)       tar xvf $1     ;;
			*.tbz2)      tar xvjf $1    ;;
			*.tgz)       tar xvzf $1    ;;
			*.zip)       unzip $1       ;;
			*.Z)         uncompress $1  ;;
			*.7z)        7z x $1        ;;
			*.exe)       cabextract $1  ;;
			*.jar)       jar xvf $1     ;;
			*)           echo "'$1': unrecognized file compression" ;;
		esac
	else
		echo "'$1' is not a valid file"
	fi
}

# chmod restore
#   recursively sets chmod of files to 644 and directories to 755
chres() {
	if [ $1 ]; then
		folder=$1
	else
		folder="."
	fi

	find $folder -type d -exec chmod 755 "{}" \;
	find $folder -type f -exec chmod 644 "{}" \;
}

# remap control to caps lock (remove capslock)
rmcaps() {
	xmodmap -e 'remove Lock = Caps_Lock'
	xmodmap -e 'keysym Caps_Lock = Control_L'
	xmodmap -e 'add Control = Control_L'
}

## normalize a pdf using PDFCROP and Ghostscript
pdfnorm() {
	MARGINS=30
	PAPERSIZE=a4

	if [ ! $1 ]; then
		echo "please specify an input file"
		return 1;
	elif [ ! -f $1 ]; then
		echo "$1 is not a file"
		return 1;
	fi

	TMPFILE=$(mktemp)

	if [ ! $2 ]; then
		OUTFILE=output.pdf
	else
		OUTFILE=$2
	fi

	pdfcrop --margins $MARGINS $1 $TMPFILE > /dev/null
	ghostscript -dNOPAUSE -dBATCH -sDEVICE=pdfwrite -sPAPERSIZE=$PAPERSIZE -dFIXEDMEDIA -dPDFFitPage -sOutputFile=$OUTFILE $TMPFILE > /dev/null

	rm $TMPFILE
}

## count words of a pdf
pdfwc() {
	if [ ! $1 ]; then
		echo "please specify an input file"
		return 1;
	elif [ ! -f $1 ]; then
		echo "$1 is not a file"
		return 1;
	fi

	pdftotext $1 - | wc -w
}

# clean intellij IDEA project files
idea-clean() {
	if [ $1 ]; then
		folder=$1
	else
		folder="."
	fi

	REGEX=".*\.\(iml\|ipr\)"
	find $1 -regex $REGEX -exec rm -rf {} \;
	find $1 -type d -name ".idea" | xargs rm -r
}

## trace a given command
trace() {
	while [ 1 ]; do
		clear
		$@
		sleep 0.5
	done
}

## recursive git
rgit() {
	for f in $(find -L -name .git -a -type d | sed "s/^\.\///"); do
		d=$(dirname $f)
		echo -e "\e[1;34m${d}\e[0m"
		(cd $d; git "$@")
		echo
	done
}

alias rg=rgit

## recursive git status
alias rgs='rg status -sb'

## recursive git remote update
alias rgru='rg remote update'
